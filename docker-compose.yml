version: "3.9"

services:
    # When starting server configure the nginx.conf server name to the ip address of the server
    frontend:
        build:
            context: .
            dockerfile: ./docker/Dockerfile.frontend
        restart: on-failure
        image: liam-ob/frontend
        volumes:
            - frontend:/frontend
        ports:
            - "3000:3000"
        depends_on:
            - backend
        env_file:
            - ./docker/.env
        # NOTES:
        # Check for syntax errors: sudo nginx -t
        # Restart nginx: sudo nginx -t && sudo systemctl restart nginx bro


    backend:
        build:
            context: .
            dockerfile: ./docker/Dockerfile.backend
        restart: on-failure
        image: liam-ob/backend
        volumes:
            - backend:/backend
        ports:
            - "8000:8000"
        depends_on:
            - postgres
            - pgadmin
        env_file:
            - ./docker/.env
        # NOTES:
        # To bash: docker-compose exec -it backend bash
        # Check systemctl status: sudo systemctl status gunicorn.socket
        # Check for .sock file: file /run/gunicorn.sock
        # Check logs: sudo journalctl -u gunicorn
        # Check connection: curl --unix-socket /run/gunicorn.sock localhost
        # Restart django app: sudo systemctl restart gunicorn
        # Restart daemon: sudo systemctl daemon-reload
        # Restart socket: sudo systemctl restart gunicorn.socket
        

    postgres:
        image: postgres:13.3
        volumes:
            - postgres_data:/var/lib/postgresql/data/
        ports:
            - "5432:5432"
        expose:
            - "5432"
        env_file:
            - ./docker/.env

    pgadmin:
        image: dpage/pgadmin4
        volumes:
            - ./docker/pg_admin_db_setup.json:/pgadmin4/servers.json
        ports:
            - "5050:80"
        restart: unless-stopped
        depends_on:
            - postgres
        env_file:
            - ./docker/.env

volumes:
    postgres_data:  # Just name the volume to persist between restarts
    backend:
    frontend:
